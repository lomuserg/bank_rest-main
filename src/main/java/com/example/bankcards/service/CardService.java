package com.example.bankcards.service;

import com.example.bankcards.dto.card.CardDto;
import com.example.bankcards.dto.card.CreateCardRequest;
import com.example.bankcards.entity.User;
import com.example.bankcards.entity.card.Card;
import com.example.bankcards.entity.card.CardStatus;
import com.example.bankcards.exception.AppException;
import com.example.bankcards.mapper.CardMapper;
import com.example.bankcards.repository.CardsRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Service
@RequiredArgsConstructor
public class CardService {
    private final CardsRepository cardsRepository;
    private final UserService userService;
    private final CardMapper cardMapper;

    // üîπ –ê–¥–º–∏–Ω: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
    public CardDto createCard(CreateCardRequest request) {

        User owner = userService.getUserById(request.getOwnerId());

        Card card = Card.builder()
                .cardNumber(request.getCardNumber()) // –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Jasypt –∏–ª–∏ –≤ EntityListener
                .owner(owner)
                .expiryDate(request.getExpiryDate())
                .status(CardStatus.ACTIVE)
                .balance(request.getBalance() != null ? request.getBalance() : BigDecimal.ZERO)
                .build();

        Card saved = cardsRepository.save(card);
        return cardMapper.toDto(saved);
    }

    // üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É)
    public Page<CardDto> getUserCards(String login, CardStatus status, Pageable pageable) {
        User user = userService.getUserByLogin(login);
        Page<Card> cards = status != null
                ? cardsRepository.findPageByOwnerIdAndStatus(user.getId(), status, pageable)
                : cardsRepository.findPageByOwnerId(user.getId(), pageable);
        return cards.map(cardMapper::toDto);
    }

    // üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã
    public void requestBlockCard(Long cardId, String login) {
        Card card = getCardAndCheckOwnership(cardId, login);

        if (!card.getStatus().equals(CardStatus.ACTIVE)) {
            throw new AppException("–ö–∞—Ä—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", HttpStatus.BAD_REQUEST);
        }

        // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∑–∞—è–≤–∫—É, –Ω–æ –ø–æ–∫–∞ —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        card.setStatus(CardStatus.BLOCKED);
        cardsRepository.save(card);
    }

    // üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
    @Transactional
    public void transferBetweenOwnCards(Long fromId, Long toId, BigDecimal amount, String login) {
        Card from = getCardAndCheckOwnership(fromId, login);
        Card to = getCardAndCheckOwnership(toId, login);

        if (from.getBalance().compareTo(amount) < 0) {
            throw new AppException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", HttpStatus.BAD_REQUEST);
        }

        from.setBalance(from.getBalance().subtract(amount));
        to.setBalance(to.getBalance().add(amount));

        cardsRepository.save(from);
        cardsRepository.save(to);
    }

    // üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã
    public BigDecimal getBalance(Long cardId, String login) {
        Card card = getCardAndCheckOwnership(cardId, login);
        return card.getBalance();
    }

    // üîπ –ê–¥–º–∏–Ω: –í—Å–µ –∫–∞—Ä—Ç—ã (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
    public Page<CardDto> getAllCards(CardStatus status, Pageable pageable) {
        Page<Card> cards = status != null
                ? cardsRepository.findAllByStatus(status, pageable)
                : cardsRepository.findAll(pageable);
        return cards.map(cardMapper::toDto);
    }

    // üîπ –ê–¥–º–∏–Ω: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    public void blockCard(Long id) {
        Card card = findCardById(id);
        if (card.getStatus() == CardStatus.BLOCKED) {
            throw new AppException("–ö–∞—Ä—Ç–∞ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞", HttpStatus.CONFLICT);
        }
        card.setStatus(CardStatus.BLOCKED);
        cardsRepository.save(card);
    }

    // üîπ –ê–¥–º–∏–Ω: –ê–∫—Ç–∏–≤–∞—Ü–∏—è (—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
    public void activateCard(Long id) {
        Card card = findCardById(id);
        if (card.getStatus() == CardStatus.ACTIVE) {
            throw new AppException("–ö–∞—Ä—Ç–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞", HttpStatus.CONFLICT);
        }
        if (card.getStatus() == CardStatus.EXPIRED) {
            throw new AppException("–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É", HttpStatus.BAD_REQUEST);
        }
        card.setStatus(CardStatus.ACTIVE);
        cardsRepository.save(card);
    }

    // üîπ –ê–¥–º–∏–Ω: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    public void deleteCard(Long id) {
        Card card = findCardById(id);
        cardsRepository.deleteById(card.getId());
    }

    // üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private Card getCardAndCheckOwnership(Long cardId, String login) {
        Card card = findCardById(cardId);
        User owner = userService.getUserByLogin(login);
        if (!card.getOwner().getId().equals(owner.getId())) {
            throw new AppException("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", HttpStatus.FORBIDDEN);
        }
        return card;
    }

    private Card findCardById(Long id) {
        return cardsRepository.findById(id);
    }

}
